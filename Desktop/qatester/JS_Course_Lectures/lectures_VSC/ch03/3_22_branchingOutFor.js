/*
Разветвление 
Операторы цикла и ветвления называются управляющими операторами, поскольку они управляют порядком выполнения программ JavaScript. Вы можете использовать операторы ветвления для создания разных путей выполнения кода JavaScript в зависимости от условной логики. Циклы — это самый простой способ сгруппировать операторы JavaScript в программе.
*/


/*
Вот и все: Loop De Loop
Циклы выполняют один и тот же оператор несколько раз. В JavaScript есть несколько различных типов циклов:

✓✓for

✓✓for ... in

✓✓do ... while

✓✓while
*/

/*
Оператор for создает цикл, используя три выражения:

✓✓Инициализация: начальное значение переменной, обычно счетчика.


✓✓Условие: логическое выражение, которое будет оцениваться на каждой итерации цикла.

✓✓Финальное выражение: выражение, которое будет оцениваться после каждой итерации цикла.

Хотя не обязательно использовать все три выражения в цикле for, почти всегда включаются все три выражения. Цикл for обычно используется для запуска кода заданное количество раз.
*/

for (let i = 1; i < 10; i++) {
    console.log(i);
};

/*
Вкратце, вот как работает предыдущий пример цикла for:

1. Новая переменная, в данном случае i, инициируется со значением 1.

2. Проводится тест, чтобы определить, меньше ли i 10 (i < 10).

Если это так, выполняются операторы внутри цикла (в данном случае оператор console.log (i)).

3. Если нет, значение i увеличивается с помощью оператора приращения (++). i = i + 1

4. Проверка выполняется еще раз, чтобы определить, меньше ли i 10 (i<10). Если это так, выполняются инструкции внутри цикла.

5. Проверка повторяется до тех пор, пока выражение условия не перестанет быть истинным.

*/

/*
++	Increment
--	Decrement
*/

for (let j = 1; j < 10; ++j) {
    console.log(j);
};

// for (let k = 1; k < 10; k--) {  // зацикливание до бесконечности
//     console.log(k);
// };


for (let k = 15; k > 10; k--) {
    console.log(k);
};

for (let k = 15; k > 10; --k) {
    console.log(k);
};

// проверить с i <= 10

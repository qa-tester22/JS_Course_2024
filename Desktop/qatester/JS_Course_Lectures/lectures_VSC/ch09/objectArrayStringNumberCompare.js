/*
Операторы сравнения

Сравните значения переменных в каждом задании, выведите результат в консоль:


// 1. Задача 1: Сравнение чисел

    const x = 10;
    const y = 5;
    

// 2. Задача 2: Сравнение строк

    const str1 = "hello";
    const str2 = "world";
    

// 3. Задача 3: Сравнение массивов

    const arr1 = [1, 2, 3];
    const arr2 = [1, 2, 4];

// 4. Задача 4: Сравнение объектов
    
    const obj1 = { name: "Alice", age: 30 };
    const obj2 = { name: "Bob", age: 25 };

    

https://developer.mozilla.org/ru/docs/Web/JavaScript/Equality_comparisons_and_sameness
https://learn.javascript.ru/comparison
https://learn.javascript.ru/javascript-specials


Операторы сравнения
JavaScript предоставляет три оператора сравнения величин:

равенство ("двойное равно") использует == (en-US),
строгое равенство ("тройное равно" или "идентично") использует === (en-US),
и Object.is (новшество из ECMAScript 6).
В JavaScript сравнение значений может быть несколько запутанным из-за различных типов данных и правил преобразования типов. Вот несколько особенностей сравнения в JavaScript:

1. Неявное преобразование типов: Если операнды имеют разные типы, JavaScript может неявно преобразовывать их к общему типу для выполнения операции сравнения. Например, при сравнении числа и строки, строка может быть преобразована в число.

    
    console.log(10 == "10"); // true


2. Строгое равенство (===) и строгое неравенство (!==): Это операторы сравнения, которые сравнивают значения без преобразования типов. Они возвращают `true` только в случае, если значения и типы обоих операндов совпадают.

    
    console.log(10 === "10"); // false


3. Сравнение массивов и объектов: При сравнении массивов и объектов операторы `==` и `===` сравнивают ссылки на объекты, а не их содержимое.

    
    const arr1 = [1, 2, 3];
    const arr2 = [1, 2, 3];
    console.log(arr1 == arr2); // false


4. NaN: Сравнение с `NaN` всегда возвращает `false`, даже с `NaN` самим собой. Поэтому для проверки на `NaN` используйте функцию `isNaN()`.

    
    console.log(NaN == NaN); // false
    console.log(isNaN(NaN)); // true


5. Объекты Date: Объекты `Date` сравниваются по ссылке, а не по содержимому.

    
    const date1 = new Date("2022-01-01");
    const date2 = new Date("2022-01-01");
    console.log(date1 == date2); // false


6. Null и undefined: Сравнение `null` и `undefined` равно только сами себе и не равно друг другу.

    
    console.log(null == null); // true
    console.log(undefined == undefined); // true
    console.log(null == undefined); // true


7. Тип данных Symbol: Значения типа `Symbol` уникальны и не равны никаким другим значениям.

    
    const sym1 = Symbol();
    const sym2 = Symbol();
    console.log(sym1 == sym2); // false


Эти особенности важно учитывать при сравнении значений в JavaScript, чтобы избежать непредвиденного поведения и ошибок.

В JavaScript для сравнения массивов существуют определенные правила:

1. По ссылке: Если две переменные содержат ссылки на один и тот же массив в памяти, они считаются эквивалентными.

    
    const arr1 = [1, 2, 3];
    const arr2 = arr1; // arr2 ссылается на тот же массив, что и arr1
    console.log(arr1 === arr2); // true


2. По содержимому: Если нужно сравнить массивы по содержимому, то нужно сравнивать каждый элемент массива в цикле или использовать методы сравнения, такие как `JSON.stringify()`.

    
    const arr1 = [1, 2, 3];
    const arr2 = [1, 2, 3];
    console.log(JSON.stringify(arr1) === JSON.stringify(arr2)); // true


3. Оператор строгого равенства (===): Если два массива содержат одни и те же элементы в одном и том же порядке, но не ссылаются на один и тот же объект в памяти, они все равно будут считаться разными.

    
    const arr1 = [1, 2, 3];
    const arr2 = [1, 2, 3];
    console.log(arr1 === arr2); // false


4. Методы сравнения: В некоторых библиотеках JavaScript есть специальные методы для сравнения массивов по содержимому, например, метод `isEqual()` в библиотеке Lodash.

    
    const _ = require('lodash');
    const arr1 = [1, 2, 3];
    const arr2 = [1, 2, 3];
    console.log(_.isEqual(arr1, arr2)); // true


При выборе метода сравнения необходимо учитывать требования вашего приложения, такие как производительность и требования к точности сравнения.
*/

// 1. Задача 1: Сравнение чисел

//     Напишите программу, которая сравнивает два числа `x` и `y` и выводит на экран сообщение о том, какое из чисел больше.

    const x = 10;
    const y = 5;

    if (x > y) {
        console.log("Число x больше числа y");
    } else if (x < y) {
        console.log("Число y больше числа x");
    } else {
        console.log("Числа x и y равны");
    }
    

// 2. Задача 2: Сравнение строк

//     Напишите программу, которая сравнивает две строки `str1` и `str2` и выводит на экран сообщение о том, являются ли они одинаковыми или разными.


    const str1 = "hello";
    const str2 = "world";

    if (str1 === str2) {
        console.log("Строки одинаковые");
    } else {
        console.log("Строки разные");
    }
    

// 3. Задача 3: Сравнение массивов

//     Напишите программу, которая сравнивает два массива `arr1` и `arr2` и выводит на экран сообщение о том, содержат ли они одинаковые элементы или разные.


    const arr1 = [1, 2, 3];
    const arr2 = [1, 2, 4];

    if (JSON.stringify(arr1) === JSON.stringify(arr2)) {
        console.log("Массивы содержат одинаковые элементы");
    } else {
        console.log("Массивы содержат разные элементы");
    }


// 4. Задача 4: Сравнение объектов

//     Напишите программу, которая сравнивает два объекта `obj1` и `obj2` и выводит на экран сообщение о том, являются ли они одинаковыми или разными.

    
    const obj1 = { name: "Alice", age: 30 };
    const obj2 = { name: "Bob", age: 25 };

    if (JSON.stringify(obj1) === JSON.stringify(obj2)) {
        console.log("Объекты одинаковые");
    } else {
        console.log("Объекты разные");
    }
    


    /*

    РЕШЕНИЕ И ОБЪЯСНЕНИЕ
    задание 1. 
Сравните значения переменных в каждом задании, выведите результат в консоль:
*/
console.log("Сравнение чисел");
/*
// 1. Задача 1: Сравнение чисел

    const x = 10;
    const y = 5;
    
    В JavaScript сравнение чисел можно делать с использованием операторов сравнения (`<`, `<=`, `>`, `>=`). Эти операторы сравнивают два числа и возвращают логическое значение `true` или `false` в зависимости от результата сравнения.
*/


// Сравнение: x больше y
console.log(x > y); // true

// Сравнение: x меньше y
console.log(x < y); // false

// Сравнение: x больше или равно y
console.log(x >= y); // true

// Сравнение: x меньше или равно y
console.log(x <= y); // false

/*
Если результат сравнения `true`, то это означает, что условие выполнено (например, `x` больше `y`). Если результат сравнения `false`, то условие не выполнено.

В вашей задаче сравнение чисел `x` и `y` можно выполнить, используя эти операторы сравнения, чтобы определить, какое из чисел больше или меньше:


const x = 10;
const y = 5;
*/
if (x > y) {
    console.log("Число x больше числа y");
} else if (x < y) {
    console.log("Число y больше числа x");
} else {
    console.log("Числа x и y равны");
}

/*
Этот код сначала проверяет, больше ли `x` чем `y`. Если это так, то выводится сообщение "Число x больше числа y". Если `x` меньше `y`, то выводится сообщение "Число y больше числа x". Если `x` равно `y`, то выводится сообщение "Числа x и y равны".

*************************************************************************************************
*/
console.log("Сравнение строк");
/*
Сравните значения переменных в каждом задании, выведите результат в консоль:

// 2. Задача 2: Сравнение строк

    const str1 = "hello";
    const str2 = "world";
*/
/*
    В JavaScript для сравнения строк можно использовать различные операторы сравнения и методы. Вот несколько способов сравнения строк:

1. Операторы сравнения (<, >, <=, >=): Вы можете сравнивать строки непосредственно с помощью этих операторов, как если бы они были числами. При сравнении строк используется лексикографический порядок (порядок в алфавитном или лексикографическом словаре).

  
    const str1 = "hello";
    const str2 = "world";
*/
    console.log(str1 < str2); // true, так как "hello" идет раньше "world" в алфавитном порядке
    
/*
2. Методы сравнения строк (localeCompare()): Метод `localeCompare()` сравнивает две строки с учетом локали и возвращает число, которое указывает, в каком порядке они должны следовать друг за другом.

  
    const str1 = "hello";
    const str2 = "world";
*/
    console.log(str1.localeCompare(str2)); // -1, так как "hello" идет раньше "world" в алфавитном порядке
  
/*
3. Строковые методы (startsWith(), includes(), endsWith()): Эти методы позволяют проверить, начинается ли строка с определенной подстроки, содержит ли она определенную подстроку или заканчивается ли она на определенную подстроку.

  
    const str1 = "hello";
    const str2 = "world";
*/
    console.log(str1.startsWith("he")); // true
    console.log(str2.includes("or")); // true
    console.log(str1.endsWith("lo")); // true
  
/*
4. Строковые методы (indexOf(), lastIndexOf()): Эти методы позволяют найти индекс первого или последнего вхождения подстроки в строку.

  
    const str1 = "hello";
    const str2 = "world";
*/
    console.log(str1.indexOf("l")); // 2
    console.log(str2.lastIndexOf("o")); // 4
    
/*
5. Строковые методы (localeCompare()): Строки также имеют метод `localeCompare()`, который может использоваться для сравнения строк с учетом локали.

      const str1 = "hello";
    const str2 = "world";
*/
    console.log(str1.localeCompare(str2)); // -1, так как "hello" идет раньше "world" в алфавитном порядке
    
/*
Выбор метода зависит от конкретного сценария использования. Если вам нужно простое сравнение строк на основе лексикографического порядка, операторы сравнения будут наиболее простым и эффективным способом. Если вам нужно учитывать локальные различия при сравнении строк, метод `localeCompare()` может быть более подходящим вариантом.
*/
console.log("Сравнение массивов");
/*
*************************************************************************************************
Сравните значения переменных в каждом задании, выведите результат в консоль:

// 3. Задача 3: Сравнение массивов

    const arr1 = [1, 2, 3];
    const arr2 = [1, 2, 4];
*/

/*
Сравнение массивов в JavaScript может быть не так просто, как кажется на первый взгляд, особенно если нам нужно учитывать содержимое массивов, а не только ссылки на них. Давайте рассмотрим несколько подходов к сравнению массивов `arr1` и `arr2`.

1. Поэлементное сравнение:

   В этом случае мы проходимся по каждому элементу обоих массивов и сравниваем их.
*/
   
   function arraysAreEqual(arr1, arr2) {
       if (arr1.length !== arr2.length) {
           return false;
       }
       for (let i = 0; i < arr1.length; i++) {
           if (arr1[i] !== arr2[i]) {
               return false;
           }
       }
       return true;
   }

//    const arr1 = [1, 2, 3];
//    const arr2 = [1, 2, 4];

   console.log(arraysAreEqual(arr1, arr2)); // false
  
/*
2. Преобразование в строку и сравнение:

   Если мы уверены, что массивы содержат простые значения (числа, строки и т.д.), мы можем преобразовать их в строки с помощью `JSON.stringify()` и затем сравнить полученные строки.
*/
   
//    const arr1 = [1, 2, 3];
//    const arr2 = [1, 2, 4];

   if (JSON.stringify(arr1) === JSON.stringify(arr2)) {
       console.log("Массивы содержат одинаковые элементы");
   } else {
       console.log("Массивы содержат разные элементы");
   }
  
/*
3. Использование метода `every()`:

   Метод `every()` применяется к каждому элементу массива и возвращает `true`, если для каждого элемента в массиве выполняется условие.
*/
   
   function arraysAreEqual(arr1, arr2) {
       return arr1.length === arr2.length && arr1.every((val, index) => val === arr2[index]);
   }

//    const arr1 = [1, 2, 3];
//    const arr2 = [1, 2, 4];

   console.log(arraysAreEqual(arr1, arr2)); // false
  
/*
Каждый из этих методов имеет свои особенности и подходит для разных сценариев. Важно выбрать тот, который лучше всего подходит для вашей конкретной задачи и учитывает потенциальные ограничения и требования к производительности.
*/

console.log("Сравнение объектов");
/*
*************************************************************************************************
Сравните значения переменных в каждом задании, выведите результат в консоль:

// 4. Задача 4: Сравнение объектов
    
    const obj1 = { name: "Alice", age: 30 };
    const obj2 = { name: "Bob", age: 25 };
    */

    /*
    В JavaScript сравнение объектов происходит по ссылке, а не по содержимому. Это означает, что если у вас есть два разных объекта с одинаковыми свойствами и значениями, они всё равно будут считаться разными, если их ссылки указывают на разные места в памяти. Даже если их свойства и значения идентичны, JavaScript будет считать их разными объектами.

Поэтому для сравнения объектов по содержимому обычно используется преобразование их свойств в JSON-строки, а затем сравнение полученных строк.

Вот как выглядит пример сравнения объектов по содержимому:


const obj1 = { name: "Alice", age: 30 };
const obj2 = { name: "Bob", age: 25 };
*/
const str1Obj = JSON.stringify(obj1); // Преобразуем объекты в JSON-строки
const str2Obj = JSON.stringify(obj2);

if (str1 === str2) { // Сравниваем JSON-строки
    console.log("Объекты одинаковые");
} else {
    console.log("Объекты разные");
}

/*
Это сравнение сначала преобразует объекты `obj1` и `obj2` в JSON-строки с помощью `JSON.stringify()`, а затем сравнивает полученные строки. Если объекты имеют одинаковые свойства и значения, их JSON-строки будут одинаковыми, и условие `str1Obj === str2Obj` вернет `true`.

Однако стоит отметить, что этот метод сравнения может быть неэффективным при работе с большими и сложными объектами, так как преобразование объектов в JSON-строки и сравнение строк может быть затратным по памяти и времени.

Без использования сторонних библиотек, таких как Lodash, и без преобразования объектов в JSON-строки, вы можете написать собственную функцию для сравнения объектов по содержимому. Вот пример такой функции:
*/

function deepEqual(obj1, obj2) {
    // Проверяем, являются ли оба объекта объектами
    if (typeof obj1 !== 'object' || typeof obj2 !== 'object') {
        return obj1 === obj2;  // тогда проверяем равенство ключей
    }

    // Получаем ключи объектов
    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);

    // Проверяем, имеют ли оба объекта одинаковое количество ключей
    if (keys1.length !== keys2.length) {
        return false;
    }

    // Проверяем каждый ключ и значение объектов
    for (let key of keys1) {
        if (!obj2.hasOwnProperty(key) || !deepEqual(obj1[key], obj2[key])) {
            return false;
        }
    }

    // Если все ключи и значения равны, объекты равны
    return true;
}

// const obj1 = { name: "Alice", age: 30 };
// const obj2 = { name: "Bob", age: 25 };
const obj3 = { name: "Alice", age: 30 };

console.log(deepEqual(obj1, obj2)); // false
console.log(deepEqual(obj1, obj3)); // true

/*
Эта функция `deepEqual` сначала проверяет, являются ли оба объекта объектами. Затем она проверяет, имеют ли оба объекта одинаковые ключи. После этого она рекурсивно проверяет каждое значение объектов. Если все ключи и значения равны, функция возвращает `true`, иначе `false`. 

Такой подход к сравнению объектов по содержимому называется глубоким сравнением (deep comparison). Он обеспечивает более точное сравнение, чем простое сравнение по ссылке, но может быть более затратным по ресурсам, особенно при работе с большими и сложными объектами.
*/
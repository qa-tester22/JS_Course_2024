// Число (Number): Представляет числовые значения, включая целые числа и числа с плавающей запятой.
//В JavaScript максимальное возможное число можно получить, обратившись к свойству `Number.MAX_VALUE`. Это число представляет максимально допустимое положительное число, которое можно представить в JavaScript. Вы можете вывести его на печать в среде разработки VSCode следующим образом:


console.log(Number.MAX_VALUE);


//Для вывода наименьшего возможного числа в JavaScript, вы можете использовать свойство `Number.MIN_VALUE`. Однако следует помнить, что это значение представляет наименьшее положительное число, которое можно представить в JavaScript в формате числа с плавающей запятой (64-битный IEEE 754). Это не отрицательное число, а наименьшее положительное, близкое к нулю.


console.log(Number.MIN_VALUE);


//Если вам нужно получить наименьшее отрицательное число, то вместо этого вы можете использовать отрицательное бесконечное значение, доступное через свойство `Number.NEGATIVE_INFINITY`:


console.log(Number.NEGATIVE_INFINITY);

let maxNumber = Number.MAX_VALUE;
let minNumber = Number.MIN_VALUE;
let negativeInfinity = Number.NEGATIVE_INFINITY;

console.log(maxNumber.toFixed()); // Выведет максимальное число без научной нотации
console.log(minNumber.toFixed()); // Выведет минимальное число без научной нотации
console.log(negativeInfinity.toFixed()); // Выведет -Infinity без научной нотации

let fullMaxNumber = Number.MAX_VALUE;
let fullMinNumber = Number.MIN_VALUE;
let fullNegativeInfinity = Number.NEGATIVE_INFINITY;

console.log(fullMaxNumber.toLocaleString('fullwide', { useGrouping: false })); // Выведет максимальное число без научной нотации
console.log(fullMinNumber.toLocaleString('fullwide', { useGrouping: false })); // Выведет минимальное число без научной нотации
console.log(fullNegativeInfinity.toLocaleString('fullwide', { useGrouping: false })); // Выведет -Infinity без научной нотации

// Чтобы объявить числовую переменную , нужно скомпилировать ее из всех изученных элементов:
// ключевое слово let, const + имя + оператор присваивания "=" + число или числовое выражение + ";".

let september = 9;
let lettersInJs = 10;



// JavaScript включает встроенную функцию Number для преобразования значений в числа. 
//Чтобы использовать функцию «Number», просто поместите значение (или переменную, содержащую значение), которое вы хотите преобразовать в число, в скобках после функции «Number».

//Функция Number производит четыре вида вывода:

//✓✓Числа, отформатированные как текстовые строки, преобразуются в числа, которые можно использовать для вычислений, например:

let eleven = "11";
eleven = Number(eleven) // возвращает число 11
console.log(eleven);

// ✓✓Текстовые строки, которые невозможно преобразовать в числа, возвращают значение NaN, например:

let myString = "String";
myString = Number(myString); // возвращает NaN
console.log(myString);

// ✓✓Логическое значение true возвращает число 1, например:

let logicTrue = Number(true); // возвращает 1
console.log(logicTrue);

//✓✓Логическое значение false возвращает число 0, например:

let logicFalse = Number(false); // возвращает 0
console.log(logicFalse);


//функция parseInt()
//В JavaScript все числа на самом деле являются числами с плавающей запятой. Однако вы можете использовать функцию parseInt(), чтобы указать JavaScript учитывать только недробную часть числа (целое число), отбрасывая все, что находится после десятичной точки.



parseInt(2005.55); // returns 2005
console.log(parseInt(2005.55));

//parseFloat(); function
//Вы можете использовать parseFloat(), чтобы указать JavaScript, что число следует рассматривать как число с плавающей запятой. Или вы даже можете использовать его для преобразования строки в число. Например:



parseFloat("77"); // returns 77
parseFloat(777.01); //returns 777.01
parseFloat("777"); //returns 777


console.log(parseFloat("77")); // returns 77
console.log(parseFloat(777.01)); //returns 777.01
console.log(parseFloat("777")); //returns 777

console.log(2 + 2);
console.log(5 * 3);
console.log(parseFloat("567"));
console.log(parseInt("12.345678"));
console.log(55 + "55");
console.log("55" + 55);
console.log("55" * 5);


// Числовые переменные должны быть объявлены без кавычек.
// «55» — это не то же самое, что 55. Первое — это строка, и если вы случайно объявите числовую переменную внутри кавычек, вы получите неожиданные результаты.


//Если вы следите за этим, возможно, вы заметили некоторые странные особенности поведения в предыдущих примерах. Например, если вы прибавляете «55» (строку) к 55 (числу), результатом будет «5555» (строка). 
// Но когда вы умножаете «55» (строка) на 5 (число), результат — 275 (число). Это тот случай, когда JavaScript действительно использует свою голову!

// В первом примере, когда вы складываете, JavaScript предполагает, что, поскольку одно из значений в уравнении сложения является строкой, вы имели в виду, что они оба должны быть такими. Таким образом, он преобразует число в строку и рассматривает символ плюса как оператор конкатенации.
// as a con-catenation operator.

// Во втором примере при умножении одно из значений операции является числом, и перемножить строки вместе невозможно. JavaScript преобразует строку в число, а затем приступает к умножению. Но что произойдет, если вы попытаетесь соединить две строки вместе?


console.log("testing" * "SDET");

// Результатом является NaN (не число). Преобразовать "testing" или "SDET" в число просто невозможно, поэтому JavaScript разводит руками.

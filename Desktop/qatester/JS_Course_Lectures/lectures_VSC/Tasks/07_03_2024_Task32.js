/*
Задача 32. Быстрое преобразование массива.
*/
let numbers = [4, 8, 15, 16, 23, 42];

// let doubledNumbers = numbers.******(function(num) {
    // return num * 2;
// });

// console.log(doubledNumbers); // Вывод: [8, 16, 30, 32, 46, 84]

/*
Какой метод массива был использован в коде - что нужно написать на месте `******`?
1. forEach()
2. filter()
3. map()
4. reduce()


Выберите один ответ.
/ можно просто нажать на нужную цифру-эмоджи или в комментариях ответить. Если что-то не понятно - задавайте вопросы в комментариях.
:one:   :two:   :three:   :four:
******************************************************************************************************

Правильный ответ: 3. метод map() был использован для преобразования каждого элемента массива.

В данном коде использован метод массива `map()`. В методе `map()` вызывается функция обратного вызова для каждого элемента массива, результаты её выполнения сохраняются в новом массиве, который и возвращается. Таким образом, каждый элемент исходного массива удваивается. 

Давайте рассмотрим каждый из вариантов:

1. `forEach()`: Метод `forEach()` используется для выполнения функции обратного вызова для каждого элемента массива, но он не возвращает новый массив с результатами применения функции к каждому элементу. Он просто перебирает элементы массива, поэтому не подходит для создания нового массива с удвоенными значениями.
   
2. `filter()`: Метод `filter()` используется для фильтрации элементов массива на основе определённого условия, возвращая только те элементы, для которых условие истинно. В данном случае мы не фильтруем элементы, а изменяем их значения, поэтому `filter()` не подходит.

3. `map()`: Метод `map()` используется для преобразования каждого элемента массива с помощью функции обратного вызова и создания нового массива с результатами преобразований. В данном случае мы применяем функцию удвоения к каждому элементу массива и создаем новый массив с удвоенными значениями, что соответствует задаче.

4. `reduce()`: Метод `reduce()` используется для свертки (преобразования) массива в одно значение на основе функции обратного вызова. В данном случае мы не сворачиваем массив в одно значение, а создаем новый массив с удвоенными значениями, поэтому `reduce()` не подходит.

Таким образом, единственный метод, который подходит для данной задачи - это `map()`.


*/
/*
А если мы не хотим изменять существующий массив numbers. Мы же можем также сохранить результат в новую переменную. Вот так:
*/


// let numbers = [4, 8, 15, 16, 23, 42];
let doubledNumbers = [];
numbers.forEach(function(num, index) {
  doubledNumbers[index] = 2 * num;
  return doubledNumbers;
});
console.log(doubledNumbers); // [ 8, 16, 30, 32, 46, 84 ]
console.log(numbers);        // [ 4, 8, 15, 16, 23, 42 ]
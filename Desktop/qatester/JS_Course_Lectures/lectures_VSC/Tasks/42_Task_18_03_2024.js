/*
Задача 42: Защищенный банковский счет. ООП, Инкапсуляция JS.
*/

class BankAccount {
  constructor(balance) {
    this._balance = balance;
  }

  deposit(amount) {
    if (amount > 0) {
      this._balance += amount;
      console.log(`Вы внесли ${amount} на ваш счет.`);
    } else {
      console.log('Некорректная сумма для внесения.');
    }
  }

  withdraw(amount) {
    if (amount > 0 && amount <= this._balance) {
      this._balance -= amount;
      console.log(`Вы сняли ${amount} со счета.`);
    } else {
      console.log('Недостаточно средств или некорректная сумма для снятия.');
    }
  }

  getBalance() {
    console.log(`Текущий баланс: ${this._balance}`);
  }
}

const account = new BankAccount(1000);
account.withdraw(500);

/*
Вопрос:

Что будет выведено на экран при вызове метода `withdraw(500)` для экземпляра `account`?

Варианты ответов:

1) "Вы сняли 500 со счета."

2) "Недостаточно средств или некорректная сумма для снятия."

3) "Текущий баланс: 500"

4) "Вы сняли 500 со счета. Текущий баланс: 500"


Выберите один ответ.
/ можно просто нажать на нужную цифру-эмоджи или в комментариях ответить. Если что-то не понятно - задавайте вопросы в комментариях.
:one:   :two:   :three:   :four:

*************************************************************************************************

Какой вариант ответа верный?


/*
Правильный Ответ 1) "Вы сняли 500 со счета." верный.

При вызове метода `withdraw(500)` для экземпляра `account`, выводится сообщение "Вы сняли 500 со счета.", потому что сумма 500 была успешно снята со счета, и баланс уменьшился на эту сумму.

В данном примере инкапсуляция проявляется в использовании приватной переменной `_balance`, которая хранит текущий баланс счета. Само свойство `_balance` является приватным, так как оно начинается с символа подчеркивания `_`, что является общепринятым соглашением в JavaScript о том, что свойства, начинающиеся с символа подчеркивания, должны рассматриваться как приватные, т.е. не должны напрямую изменяться или использоваться извне объекта.

Класс `BankAccount` предоставляет публичные методы для внесения денег на счет (`deposit`), снятия денег со счета (`withdraw`) и получения текущего баланса (`getBalance`). При этом данные методы обращаются к приватной переменной `_balance`, но напрямую извне класса изменить её значение нельзя.

Иными словами, инкапсуляция здесь обеспечивает контролируемый доступ к данным объекта `BankAccount` и скрывает детали его внутренней реализации, что позволяет избежать случайных изменений или некорректного использования данных.
*/

//  задание на основе этого кода о счете банка:


class BankAccount {
  constructor(balance) {
    this._balance = balance;
  }

  deposit(amount) {
    // Ваш код для внесения денег на счет
  }

  withdraw(amount) {
    // Ваш код для снятия денег со счета
  }

  getBalance() {
    // Ваш код для получения текущего баланса
  }
}

const account = new BankAccount(1000);
account.withdraw(500);

/*
Вопрос:

В каком порядке следует заполнить пропуски в методах `deposit`, `withdraw` и `getBalance`, чтобы код о счете банка работал корректно?

A) `this._balance -= amount;`, `this._balance += amount;`, `return this._balance;`

B) `this._balance += amount;`, `this._balance -= amount;`, `return this._balance;`

C) `this._balance += amount;`, `this._balance -= amount;`, `console.log(this._balance);`

D) `this._balance -= amount;`, `this._balance += amount;`, `console.log(this._balance);`

Какой вариант верный?
*/
/*
Задача 38. Деструктуризация объктов в JS.
*/
function processUserData(person) {
    const { name, age } = person;
    console.log(`Пользователь ${name} имеет возраст ${age} лет.`);
}

function processUserLocation(person) {
    const { country } = person;
    console.log(`Пользователь находится в стране ${country}.`);
}

function processRequest(request) {
    const { source } = request;
    console.log(`Запрос получен из источника: ${source}`);
}

const user = {
    name: 'John',
    age: 30,
    email: 'john@example.com',
    country: 'USA'
};

const person = {
    name: 'Jane',
    age: 25,
    email: 'jane@example.com',
    country: 'UK'
};

const request = {
    source: 'localhost'
};

processUserData(user);
processUserLocation(user);
processRequest(request);

/*
Вопрос: Что выведется в консоль после выполнения данного кода?

1. Пользователь Jane имеет возраст 25 лет.Пользователь находится в стране UK. Запрос получен из источника: localhost.
2. Пользователь John имеет возраст 30 лет. Пользователь находится в стране USA. Запрос получен из источника: localhost.
3. Запрос получен из источника: localhost.
4. Ошибка: "processRequest is not defined".

Выберите один ответ.
/ можно просто нажать на нужную цифру-эмоджи или в комментариях ответить. Если что-то не понятно - задавайте вопросы в комментариях.
:one:   :two:   :three:   :four:

******************************************************************************************************
---
*/
/*
 Правильный ответ: 2
  После выполнения данного кода в консоль будет выведено следующее:

Пользователь John имеет возраст 30 лет.
Пользователь находится в стране USA.
Запрос получен из источника: localhost

что происходит:
1. Функция `processUserData()` обрабатывает объект `user`, извлекая из него свойства `name` и `age`, и выводит их значения в консоль.
2. Функция `processUserLocation()` также обрабатывает объект `user`, извлекая из него свойство `country`, и выводит его значение в консоль.
3. Функция `processRequest()` обрабатывает объект `request`, извлекая из него свойство `source`, и выводит его значение в консоль.
4. Объект `user` содержит свойства `name`, `age`, `email` и `country`.
5. Объект `person` содержит свойства `name`, `age`, `email` и `country`.
6. Объект `request` содержит свойство `source`.
7. В коде отсутствуют ошибки, и все функции определены корректно, поэтому в консоль выводятся данные о пользователе `John`, его возрасте и стране, а также сообщение о полученном запросе.


В данном контексте, хотя параметр функции называется `person`, при вызове функции используется объект `user`. Это происходит потому, что имена параметров функции не обязательно должны совпадать с именами объектов, которые мы передаем в функцию при ее вызове.

Таким образом, когда мы вызываем функции `processUserData(user)` и `processUserLocation(user)`, мы фактически передаем объект `user` в качестве аргумента, и внутри тела функций мы используем деструктуризацию, чтобы извлечь нужные свойства из этого объекта.

В задаче используется деструктуризация объекта в двух функциях: `processUserData()` и `processUserLocation()`.

В функции `processUserData()` происходит деструктуризация объекта `person`:

function processUserData(person) {
    const { name, age } = person;
    console.log(`Пользователь ${name} имеет возраст ${age} лет.`);
}


Здесь мы извлекаем свойства `name` и `age` из объекта `person` и сохраняем их в переменные `name` и `age`.

В функции `processUserLocation()` происходит деструктуризация объекта `user`:

function processUserLocation(person) {
    const { country } = person;
    console.log(`Пользователь находится в стране ${country}.`);
}


Здесь мы извлекаем свойство `country` из объекта `person` и сохраняем его в переменную `country`.

Обе эти функции могут принимать объекты с различными свойствами, но они используют только те свойства, которые им необходимы, благодаря деструктуризации. Это делает код более гибким и легко читаемым.



// Функция, которая принимает объект с информацией о пользователе и выводит сообщение о нем
function processUserData(user) {
    // Извлечение имени пользователя и возраста с помощью деструктуризации
    const { name, age } = user;

    // Вывод сообщения о пользователе
    console.log(`Пользователь ${name} имеет возраст ${age} лет.`);
}

// Функция, которая принимает объект с информацией о пользователе и выводит сообщение о его местоположении
function processUserLocation(user) {
    // Извлечение страны пользователя с помощью деструктуризации
    const { country } = user;

    // Вывод сообщения о местоположении пользователя
    console.log(`Пользователь находится в стране ${country}.`);
}

// Функция, которая принимает объект с информацией о запросе и выводит сообщение о его источнике
function processRequest(request) {
    // Извлечение информации о источнике запроса с помощью деструктуризации
    const { source } = request;

    // Вывод сообщения о источнике запроса
    console.log(`Запрос получен из источника: ${source}`);
}

// Объект с информацией о пользователе
const user = {
    name: 'John',
    age: 30,
    email: 'john@example.com',
    country: 'USA'
};

// Объект с информацией о запросе
const request = {
    source: 'localhost'
};

// Вызов первой функции для вывода сообщения о пользователе
processUserData(user);

// Вызов второй функции для вывода сообщения о местоположении пользователя
processUserLocation(user);

// Вызов функции с передачей объекта запроса
processRequest(request);

/*
**Вопрос:***********************************************************************************

Что выведется в консоль после выполнения данного кода?

1. Пользователь John имеет возраст 30 лет. Пользователь находится в стране USA. Запрос получен из источника: localhost.
2. Пользователь John имеет возраст 30 лет. Пользователь находится в стране USA.
3. Запрос получен из источника: localhost.
4. Ошибка: "processRequest is not defined".
*/
/*

/*
создадим две функции: одна будет выводить сообщение о пользователе и его местоположении, а вторая будет выводить сообщение о том, откуда пользователь отправил запрос.


// Функция, которая принимает объект с информацией о пользователе и выводит сообщение о его местоположении
function processUser(user) {
    // Извлечение имени пользователя, возраста и страны с помощью деструктуризации
    const { name, age, country } = user;

    // Вывод сообщения о пользователе и его местоположении
    console.log(`Пользователь ${name} имеет возраст ${age} лет и находится в стране ${country}.`);
}

// Функция, которая принимает объект с информацией о запросе и выводит сообщение о его источнике
function processRequest(request) {
    // Извлечение информации о источнике запроса с помощью деструктуризации
    const { source } = request;

    // Вывод сообщения о источнике запроса
    console.log(`Запрос получен из источника: ${source}`);
}

// Объект с информацией о пользователе
const user = {
    name: 'John',
    age: 30,
    email: 'john@example.com',
    country: 'USA'
};

// Объект с информацией о запросе
const request = {
    source: 'localhost'
};

// Вызов функции с передачей объекта пользователя
processUser(user);

// Вызов функции с передачей объекта запроса
processRequest(request);

/*
В этом примере мы создали две функции: `processUser`, которая принимает объект с информацией о пользователе, и `processRequest`, которая принимает объект с информацией о запросе. Обе функции используют деструктуризацию объекта для извлечения нужных данных и выводят соответствующие сообщения в консоль.
*/

/*
Понял. Давайте разделим первую функцию на две отдельные функции: одна будет выводить сообщение о пользователе, а другая - о его местоположении.


// Функция, которая принимает объект с информацией о пользователе и выводит сообщение о нем
function processUserData(user) {
    // Извлечение имени пользователя и возраста с помощью деструктуризации
    const { name, age } = user;

    // Вывод сообщения о пользователе
    console.log(`Пользователь ${name} имеет возраст ${age} лет.`);
}

// Функция, которая принимает объект с информацией о пользователе и выводит сообщение о его местоположении
function processUserLocation(user) {
    // Извлечение страны пользователя с помощью деструктуризации
    const { country } = user;

    // Вывод сообщения о местоположении пользователя
    console.log(`Пользователь находится в стране ${country}.`);
}

// Объект с информацией о пользователе
// const user = {
//     name: 'John',
//     age: 30,
//     email: 'john@example.com',
//     country: 'USA'
// };

// Вызов первой функции для вывода сообщения о пользователе
processUserData(user);

// Вызов второй функции для вывода сообщения о местоположении пользователя
processUserLocation(user);

/*
Теперь у нас есть две отдельные функции: `processUserData`, которая выводит сообщение о пользователе, и `processUserLocation`, которая выводит сообщение о его местоположении. Обе функции используют деструктуризацию объекта для извлечения нужных данных и выводят соответствующие сообщения в консоль.
*/
